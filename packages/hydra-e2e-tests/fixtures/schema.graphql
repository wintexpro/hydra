" All transfers "
type Transfer @entity {
  from: Bytes!
  to: Bytes!
  fromAccount: Account
  toAccount: Account
  value: BigInt!
  comment: String @fulltext(query: "commentSearch")
  block: Int!
  tip: BigInt!
  timestamp: BigInt!
  insertedAt: DateTime!
  extrinsicId: String
}

" Tracks block timestamps "
type BlockTimestamp @entity {
  blockNumber: Int!
  timestamp: BigInt!
}

" Tracks block hooks "
type BlockHook @entity {
  blockNumber: Int!
  type: HookType!
  timestamp: BlockTimestamp
}

enum HookType {
  PRE
  POST
}

type Account @entity {
  "Account address"
  id: ID!
  hex: String!
  balance: BigInt!
  status: Status!
  incomingTx: [Transfer!] @derivedFrom(field: "toAccount")
  outgoingTx: [Transfer!] @derivedFrom(field: "fromAccount")
}

type Miserable @variant {
  hates: String!
  loves: [String]!
}

type HappyPoor @variant {
  isMale: Boolean
}

union Poor = HappyPoor | Miserable

type MiddleClass @variant {
  father: Poor
  mother: Poor
}

union Status = MiddleClass | HappyPoor | Miserable

type Extrinsic @entity {
  id: ID!
  hash: String!
}

interface Event {
  indexInBlock: Int!
  inExtrinsic: String
  inBlock: Int!
  network: Network!
}

type EventA implements Event @entity {
  id: ID!
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  field1: String!
}

type EventB implements Event @entity {
  id: ID!
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  field2: String!
  statusList: [Status!]
}

type EventC implements Event @entity {
  id: ID!
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  field3: String!
  complexField: ComplexEntity!
}

type ComplexEntity @entity {
  arg1: String
  arg2: String
}

enum Network {
  BABYLON
  ALEXANDRIA
  ROME
  OLYMPIA
}

type AdditionalData @jsonField {
  data: Bytes
}

type EventParam @jsonField {
  name: String
  type: String
  value: String
  additionalData: [AdditionalData!]
}

type SystemEvent @entity {
  id: ID!
  params: EventParam!
  arrayField: [String!]
}
